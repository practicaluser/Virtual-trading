cd C:\Users\Hope\Desktop\openSource\Project\Virtual-trading
.\venv\Scripts\activate
cd backend
python manage.py runserver 장고 시작

새 터미널 # backend/ 디렉터리에서 실행 (가상환경 활성화 상태)
celery -A config worker --loglevel=info

터미널 2: Celery Beat 실행
celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

python manage.py crawl_stocks



컨테이너 안에 직접 접속
docker exec -it stocksim_db psql -U stocksim_user -d stocksim_db
\dt
\d users_user;     // users_user   stocks_stock trading_transaction
SELECT * FROM  users_user;
SELECT COUNT(*) FROM stocks_stock where stock_code = '000815'; 
SELECT * FROM stocks_stock where stock_code = '000815'; 
DELETE FROM token_blacklist_outstandingtoken WHERE user_id IN (4, 6, 7, 8, 9);
DELETE FROM users_user WHERE id = 10;
DELETE FROM users_user WHERE id BETWEEN 4 AND 9;


프론트 시작
cd C:\Users\Hope\Desktop\openSource\Project\Virtual-trading\frontend-vite
npm run dev

test@test.com
1

test2@test.com
12345678

requirements.txt 생성
pip freeze > requirements.txt


2. 핵심 인증 기능 연동
회원가입 (SignupForm.tsx)
로그인 (LoginForm.tsx)

3. 인증이 필요한 API 요청 처리

4. 자동 토큰 재발급 시스템 구축

5. 로그아웃 기능 구현

6. 라우트 보호 (Route Protection)


실제 백엔드 API와 연동하여 회원가입 요청을 보내고, 성공 또는 실패에 따른 UI 피드백(예: 에러 메시지 표시, 로그인 페이지로 이동 등)을 구현하는 것
백엔드 API 연동: 현재 UI만 구현된 로그인, 회원가입, 비밀번호 변경 등의 기능에 실제 백엔드 API를 연동하여 데이터를 처리합니다.
마이페이지 기능 구체화: 비밀번호 변경, 회원 탈퇴 등의 기능을 실제 API와 연동하여 완성합니다.

프론트에게 지금까지 진행사항들을 공유해서 연동되도록 해야 한다.
6단계: 프론트엔드 연동 시나리오
백엔드 API가 완성되면 프론트엔드는 다음과 같이 동작하게 됩니다.

회원가입: 사용자가 [회원가입] 폼을 작성하고 제출하면, React는 /api/users/signup/으로 POST 요청을 보냅니다.

로그인: 사용자가 [로그인] 폼을 작성하고 제출하면, React는 /api/users/login/으로 POST 요청을 보냅니다. 성공 시 응답으로 받은 Access/Refresh 토큰을 localStorage, sessionStorage 또는 쿠키에 저장합니다.

인증 필요한 요청: 마이페이지 접근 등 인증이 필요한 API를 호출할 때는, 저장된 Access Token을 꺼내 Authorization 헤더에 담아 요청을 보냅니다.

로그아웃: 사용자가 로그아웃 버튼을 누르면, 프론트엔드는 저장된 토큰을 삭제하고, (블랙리스트 방식을 구현했다면) /api/users/logout/으로 Refresh Token을 보내 서버의 블랙리스트에 등록하도록 요청한 후, 로그인 페이지로 리디렉션합니다.


과제 1.1: 개발 환경 설정 및 프로젝트 초기화
pip install django djangorestframework djangorestframework-simplejwt

Django 프로젝트 생성
django-admin startproject config .

사용자 인증 관련 기능을 담당할 users 앱을 생성
python manage.py startapp users

config(프로젝트): 전역 설정과 진입점
users(앱): 특정 기능 구현을 위한 코드 모음


settings.py에 앱 등록: config/settings.py 파일의 INSTALLED_APPS 리스트에 방금 생성한 users 앱과 DRF를 추가
INSTALLED_APPS = [
    # ... 기존 앱들
    'rest_framework',
    'users', # 새로 추가
]

requirements.txt 생성
pip freeze > requirements.txt


데이터베이스 마이그레이션: Django가 기본적으로 필요로 하는 데이터베이스 테이블을 생성합니다. (초기 단계에서는 기본값인 SQLite 사용)
python manage.py runserver

마이그레이션 경고
Django는 프로젝트 생성 시 기본적으로 admin, auth, contenttypes, sessions 같은 앱을 포함합니다.
이 앱들이 사용할 데이터베이스 테이블을 아직 생성하지 않았기 때문에 “18 unapplied migration(s)”라는 경고가 뜹니다.


프론트 세팅
npx create-react-app . --template typescript
npm start


Git 버전 관리 시작
git init
git add .
git commit -m "Initial commit: Set up Django project structure"



과제 1.2: PostgreSQL 연동 및 기본 모델 설계

도커 세팅
cd C:\Users\Hope\Desktop\openSource\Project\Virtual-trading
docker-compose -f docker/docker-compose.yml up -d

Django가 PostgreSQL과 통신하기 위해 필요한 파이썬 패키지
pip install psycopg2-binary

backend/config/settings.py 파일을 열고 데이터베이스와 사용자 모델 설정을 변경

커스텀 User 모델 지정: settings.py 파일의 맨 아래에 다음 코드를 추가하여 Django가 우리가 만든 User 모델을 기본 인증 모델로 사용하도록 지정

users/models.py에 코드 작성

데이터베이스 마이그레이션
모델 정의와 설정 변경이 완료되었으므로, 이 내용을 실제 데이터베이스에 테이블로 생성해야 한다
cd backend

마이그레이션 파일 생성
python manage.py makemigrations users
최신 Django 버전(예: Django 5.0 이상)**은 PostgreSQL 14 버전에 추가된 새로운 데이터 타입이나 기능들을 활용하도록 개발되었을 수 있습니다. 이 때문에 이전 버전인 PostgreSQL 13에서는 더 이상 정상적으로 작동하지 않는다 그래서 volumes:- pgdata로 하면 이름이 docker_pgdata로 된다

마이그레이션 적용
python manage.py migrate


프론트
cd frontend
npm install -D tailwindcss@3 
npm install react-router-dom postcss autoprefixer
npm install -D vitest @vitest/ui jsdom @testing-library/react @testing-library/user-event @testing-library/jest-dom
npx tailwindcss init -p

tailwind.config.js 파일 수정










## GitHub Actions를 통한 최종 검증 계획
GitHub 저장소에 코드를 푸시할 때마다 프론트엔드와 백엔드 프로젝트가 최소한의 설치 및 실행 요구사항을 충족하는지 자동으로 검증하는 워크플로우를 설정합니다.

목표: main 브랜치에 코드가 푸시될 때마다 Ubuntu 환경에서 백엔드와 프론트엔드 의존성을 성공적으로 설치하고, 기본 테스트(빌드)를 통과하는지 확인합니다.

실행 방안:

워크플로우 파일 생성: 프로젝트 루트에 .github/workflows/ci.yml 파일을 생성합니다.

워크플로우 내용 설계:

트리거 설정: main 브랜치에 push 이벤트가 발생할 때 워크플로우가 실행되도록 설정합니다.

실행 환경: ubuntu-latest 환경에서 실행되도록 지정합니다.

두 개의 독립적인 Job 구성:

backend-check (백엔드 검증)

Python 설정: 특정 버전의 Python(예: 3.11)을 설치합니다.

의존성 설치: requirements.txt 파일을 읽어 pip install을 실행합니다.

Django 프로젝트 검증: python manage.py check 명령어를 실행합니다. 이 명령어는 설정 오류 등 프로젝트의 잠재적인 문제를 검사하며, 성공적으로 실행되면 기본 설정이 유효하다는 의미입니다.

frontend-check (프론트엔드 검증)

(가정) 프론트엔드 코드가 frontend/ 폴더에 있다고 가정합니다.

Node.js 설정: 특정 버전의 Node.js(예: 18.x)를 설치합니다.

의존성 설치: 프론트엔드 폴더로 이동하여 npm install (또는 yarn install)을 실행합니다.

빌드 테스트: npm run build를 실행하여 React 코드가 성공적으로 빌드되는지 확인합니다. 빌드 과정에서 오류가 없으면 기본적인 코드 문법과 의존성 설정이 올바르다는 것을 의미합니다.
