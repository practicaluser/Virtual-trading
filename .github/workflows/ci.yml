# .github/workflows/ci.yml

name: Virtual Trading CI

on:
  push:
    branches: ['main']
    # backend, frontend 또는 워크플로우 파일이 변경될 때만 실행
    paths:
      - 'backend/**'
      - 'frontend-vite/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: ['main']
    # backend, frontend 또는 워크플로우 파일이 변경될 때만 실행
    paths:
      - 'backend/**'
      - 'frontend-vite/**'
      - '.github/workflows/ci.yml'

jobs:
  # Job 1: 백엔드 검증
  backend-check:
    name: ✅ Backend Check
    runs-on: ubuntu-latest

    services:
      # 테스트용 PostgreSQL 서비스
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: stocksim_db
          POSTGRES_USER: stocksim_user
          POSTGRES_PASSWORD: stocksim_password
        ports:
          - 8765:5432 # Runner의 8765 포트와 매핑
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # [개선] Celery 테스트를 위한 Redis 서비스 추가
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379 # Runner의 6379 포트와 매핑
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # [개선] pip 의존성 캐싱
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y libpq-dev

      - name: Install dependencies
        # [개선] backend 디렉토리에서 명령어 실행
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r ../requirements.txt
          # [개선] 린팅 및 커버리지 도구 설치
          pip install flake8 black isort coverage

      - name: Lint with flake8, black, isort
        # [개선] backend 디렉토리에서 명령어 실행
        working-directory: ./backend
        run: |
          echo "Running flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "Running black check..."
          black --check .
          echo "Running isort check..."
          isort --check .

      - name: Run Django unit tests with coverage
        # [개S] backend 디렉토리에서 명령어 실행
        working-directory: ./backend
        # [개선] 테스트용 환경 변수에 Redis 추가
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 8765
          DB_NAME: stocksim_db
          DB_USER: stocksim_user
          DB_PASSWORD: stocksim_password
          REDIS_HOST: 127.0.0.1 # 서비스 포트 매핑 사용
          REDIS_PORT: 6379
          # [개선] Celery가 테스트 중 즉시 실행되도록 설정 (권장)
          CELERY_TASK_ALWAYS_EAGER: 'True'
        run: |
          # [개선] coverage로 테스트 실행 및 커버리지 80% 미만 시 실패
          coverage run manage.py test
          coverage report -m --fail-under=80

  # Job 2: 프런트엔드 검증
  frontend-check:
    name: 🚀 Frontend Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend-vite/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend-vite
        run: npm ci

      - name: Lint with ESLint
        working-directory: ./frontend-vite
        # [개선] || true를 제거하여 린트 오류 시 CI 실패
        run: | # <--- 🌟 | 를 추가
          npx eslint . --rule '@typescript-eslint/no-explicit-any: off' --rule 'react-refresh/only-export-components: off' --rule '@typescript-eslint/no-unused-vars: off'

      # [개선] 유닛 테스트(npm test) 및 E2E 테스트는 요청에 따라 생략

      - name: Test production build
        working-directory: ./frontend-vite
        run: npm run build

  # [개선] Job 3: 모든 CI 통과 확인
  ci-pipeline-success:
    name: 🏁 CI Pipeline Success
    runs-on: ubuntu-latest
    # [개선] backend-check와 frontend-check가 모두 성공해야 실행됨
    needs: [backend-check, frontend-check]
    steps:
      - name: Report success
        run: echo "✅ All CI checks passed successfully."

  # -----------------------------------------------------------------
  # 🌟 [신규] Job 4: AWS EC2에 배포 (여기에 추가!)
  # -----------------------------------------------------------------
  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    # ci-pipeline-success 잡이 성공해야만 실행됨
    needs: [ci-pipeline-success]

    # main 브랜치에 'push'될 때만 실행 (Pull Request 제외)
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            # 1. 프로젝트 디렉터리로 이동
            # (user_data.sh에서 설정한 /home/ubuntu/AscendCapital 경로)
            cd /home/ubuntu/AscendCapital

            # 2. 최신 코드 받기
            git pull

            # 3. 백엔드 의존성 업데이트 및 마이그레이션
            cd backend
            source venv/bin/activate
            # ❗️ (중요) CI와 동일하게 상위 폴더의 requirements.txt를 바라봄
            pip install -r ../requirements.txt 
            python manage.py migrate
            python manage.py collectstatic --noinput
            deactivate

            # 4. 프런트엔드 빌드
            cd ../frontend-vite
            npm ci
            npm run build

            # 5. Gunicorn, Celery 서비스 재시작 (새 코드로 갱신)
            sudo systemctl restart gunicorn
            # sudo systemctl restart celery # (Celery 설정 완료 시 주석 해제)

            echo "✅ Deployment successful!"
